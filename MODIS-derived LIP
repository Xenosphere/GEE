var roi = geometry
Map.centerObject(roi,7)

// Landsat data to calculate lake areas
// CFMASK cloud mask
// function cloudmasklandsat7and5and8(image) {
//   // Bit 0 - Fill
//   // Bit 1 - Dilated Cloud
//   // Bit 2 - Unused
//   // Bit 3 - Cloud
//   // Bit 4 - Cloud Shadow
//   var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
//   var saturationMask = image.select('QA_RADSAT').eq(0);
//   // Apply the scaling factors to the appropriate bands.
//   var opticalBands = image.select('B.').multiply(0.0000275).add(-0.2);
//   // Replace the original bands with the scaled ones and apply the masks.
//   return image.addBands(opticalBands, null, true).clip(roi)
//       .updateMask(qaMask)
//       .updateMask(saturationMask);
// }

// var LC8_BANDS = ['SR_B3','SR_B6','QA_PIXEL', 'QA_RADSAT']; //Landsat 8
// var LC7_BANDS = ['SR_B2','SR_B5','QA_PIXEL', 'QA_RADSAT']; //Landsat 7
// var LC5_BANDS = ['SR_B2','SR_B5','QA_PIXEL', 'QA_RADSAT']; //Llandsat 5
// var STD_NAMES = ['B2','B5','QA_PIXEL', 'QA_RADSAT'];

// // Rename band 4 and 5
// var landsat8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2').select(LC8_BANDS, STD_NAMES)
//                   .filterBounds(roi)
//                   .filterMetadata('CLOUD_COVER', 'less_than',50)
//                   .map(cloudmasklandsat7and5and8)
//                   .map(function(image){
//                     var NDSI = image.normalizedDifference(['B2', 'B5']).rename('NDSI')
//                     return NDSI.set(image.toDictionary(image.propertyNames()))
//                   });
// var landsat7 = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2').select(LC7_BANDS, STD_NAMES)
//                   .filter(ee.Filter.calendarRange(2012, 2012, 'year'))
//                   .filterBounds(roi)
//                   .filterMetadata('CLOUD_COVER', 'less_than',50)
//                   .map(cloudmasklandsat7and5and8)
//                   .map(function(image){
//                     var NDSI = image.normalizedDifference(['B2', 'B5']).rename('NDSI')
//                     return NDSI.set(image.toDictionary(image.propertyNames()))
//                   });
// var landsat5 = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2').select(LC7_BANDS, STD_NAMES)
//                   .filter(ee.Filter.calendarRange(2000, 2011, 'year'))
//                   .filterBounds(roi)
//                   .filterMetadata('CLOUD_COVER', 'less_than',50)
//                   .map(cloudmasklandsat7and5and8)
//                   .map(function(image){
//                     var NDSI = image.normalizedDifference(['B2', 'B5']).rename('NDSI')
//                     return NDSI.set(image.toDictionary(image.propertyNames()))
//                   });
// // Combining data sets from three sensors
// var landsatimage = ee.ImageCollection(landsat5.merge(landsat7).merge(landsat8))
//           .select('NDSI')
//           .sort('system:time_start')
// print('View the data for this time period and make output data name changes according to the image time',landsatimage)

// // Calculation of lake boundaries 
// var lake = landsatimage
//                 .filter(ee.Filter.calendarRange(2020,2021, 'year'))
//                 .filter(ee.Filter.calendarRange(10, 12, 'month'))
//                 .median()
//                 .select('NDSI')
//                 .gte(0.4)
//                 .selfMask()
// var patchsize = lake.connectedPixelCount(1024, false);
// var lakearea = patchsize.gt(50);
// Map.addLayer(lakearea,{palette:['black']},'lakearea')

// Export.image.toAsset({
//       image:lakearea,
//       description: 'lake_roi',
//       assetId: 'lake_roi',  // <> modify these
//       region:roi,
//       scale: 30,
//       crs:"EPSG:4326",
//       maxPixels :1e13
//   });



//  MODIS cloud remove
function bitwiseExtract(value, fromBit, toBit) {
      if (toBit === undefined)
        toBit = fromBit;
      var maskSize = ee.Number(1).add(toBit).subtract(fromBit);
      var mask = ee.Number(1).leftShift(maskSize).subtract(1);
      return value.rightShift(fromBit).bitwiseAnd(mask);
  }

function State_MOD09GQ(image){
  var qa_250 = image.select('QC_250m')
  var mask1 = bitwiseExtract(qa_250, 0, 1).eq(0)
  var mask2 = bitwiseExtract(qa_250, 4, 11).eq(0)
  var mask = mask1.and(mask2)
  return image.updateMask(mask)
}

// Load two MODIS datasets
var MOD09GQ = ee.ImageCollection('MODIS/061/MOD09GQ')
var MYD09GQ = ee.ImageCollection("MODIS/061/MYD09GQ")

// Visualisation 
var dataset = MYD09GQ.merge(MYD09GQ)
                  .filter(ee.Filter.date('2020-01-15', '2020-01-23'))
                  .map(function(image){
                    return image.reproject('EPSG:4326',null,250).clip(roi)
                  });
var falseColorVis = {
  min: -100.0,
  max: 8000.0,
  bands: ['sur_refl_b02', 'sur_refl_b02', 'sur_refl_b01'],
};
Map.addLayer(dataset,falseColorVis,'original')
Map.addLayer(dataset.map(State_MOD09GQ),falseColorVis,'Mask')


// Reprojection of the dataset with waters set to 0 and ice set to 1
var MODIS09 = MOD09GQ.merge(MYD09GQ)
            .filterBounds(roi)
            .filterDate('2020-08-01','2021-08-01')
            .map(State_MOD09GQ)
            .map(function(image){
              return image.reproject('EPSG:4326',null,250).clip(roi).updateMask(lakearea)
            })

var filtered = MODIS09.map(function(image) {
  var timeImage = image.metadata('system:time_start').rename('timestamp')
  var timeImageMasked = timeImage.updateMask(image.mask().select(0))
  return image.addBands(timeImageMasked)
})

var days = 60

var millis = ee.Number(days).multiply(1000*60*60*24)
var maxDiffFilter = ee.Filter.maxDifference({
  difference: millis,
  leftField: 'system:time_start',
  rightField: 'system:time_start'
})

var lessEqFilter = ee.Filter.lessThanOrEquals({
  leftField: 'system:time_start',
  rightField: 'system:time_start'
})

var greaterEqFilter = ee.Filter.greaterThanOrEquals({
  leftField: 'system:time_start',
  rightField: 'system:time_start'
})

var filter1 = ee.Filter.and(maxDiffFilter, lessEqFilter)
var join1 = ee.Join.saveAll({
  matchesKey: 'after',
  ordering: 'system:time_start',
  ascending: false})
  
var join1Result = join1.apply({
  primary: filtered,
  secondary: filtered,
  condition: filter1
})

var filter2 = ee.Filter.and(maxDiffFilter, greaterEqFilter)
var join2 = ee.Join.saveAll({
  matchesKey: 'before',
  ordering: 'system:time_start',
  ascending: true})
  
var join2Result = join2.apply({
  primary: join1Result,
  secondary: join1Result,
  condition: filter2
})

var interpolateImages = function(image) {
  var image = ee.Image(image)
  var beforeImages = ee.List(image.get('before'))
  var beforeMosaic = ee.ImageCollection.fromImages(beforeImages).mosaic()
  var afterImages = ee.List(image.get('after'))
  var afterMosaic = ee.ImageCollection.fromImages(afterImages).mosaic()

  // Interpolation formula
  // y = y1 + (y2-y1)*((t – t1) / (t2 – t1))
  // y = interpolated image
  // y1 = before image
  // y2 = after image
  // t = interpolation timestamp
  // t1 = before image timestamp
  // t2 = after image timestamp
  
  // We first compute the ratio (t – t1) / (t2 – t1)

  // Get image with before and after times
  var t1 = beforeMosaic.select('timestamp').rename('t1')
  var t2 = afterMosaic.select('timestamp').rename('t2')

  var t = image.metadata('system:time_start').rename('t')

  var timeImage = ee.Image.cat([t1, t2, t])

  var timeRatio = timeImage.expression('(t - t1) / (t2 - t1)', {
    't': timeImage.select('t'),
    't1': timeImage.select('t1'),
    't2': timeImage.select('t2'),
  })
  
  // Compute an image with the interpolated image y
  var interpolated = beforeMosaic
    .add((afterMosaic.subtract(beforeMosaic).multiply(timeRatio)))
  // Replace the masked pixels in the current image with the average value
  var result = image.unmask(interpolated)
  return result.copyProperties(image, ['system:time_start'])
}

var interpolatedCol = ee.ImageCollection(join2Result.map(interpolateImages))

// Map.addLayer(interpolatedCol,{palette:'black'},'MODIS')

// Lake are masking using MODIS
var modis = interpolatedCol.map(function(image){
  var ice1 = image.select('sur_refl_b01').subtract(image.select('sur_refl_b02')).gt(0.03)
  var ice2 = image.select('sur_refl_b01').gt(0.05)
  return ice1.and(ice2).clip(roi).updateMask(lakearea).set(image.toDictionary(image.propertyNames()))
})

// print('Lake ice phenolgy extraction results',modis)

Map.addLayer(modis.filterDate('2021-01-01','2021-02-01'),{min:0,max:1,palette:['blue','white']},'MODIS')

//---------------------------------------------------------------------------//
// DEFINE PARAMETERS
//---------------------------------------------------------------------------//
// calculate area
function get_area(img_mask){
  var area = ee.Image.pixelArea().divide(1000000);
  var this_mask=img_mask.eq(1).multiply(area)
  var area_res = this_mask.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: roi,
    scale: 250,
    maxPixels: 1e16,
    tileScale:16
  });
  var area_lt_water=area_res.values().get(0);
  return area_lt_water
}

function anaysisTimes(year_list){
  
  // var img=year_list.first()
  // Map.addLayer(img,{min:0,max:1,palette:['blue','white']},'MODIS')
  var lake_area = get_area(year_list.first().gte(0)) 
  var img_ratio=year_list.map(function(img){
    var ice_area=get_area(img.eq(1)) 
    var ratio=ee.Number(ice_area).divide(ee.Number(lake_area))
    var ratio_img=ee.Image.constant(ratio).toFloat().reproject('EPSG:4326',null,10000).clip(roi).rename('ratio')
    return ratio_img.set('ice_area',lake_area).set(img.toDictionary(img.propertyNames()))
  })
  return img_ratio
}

var year_list = modis.filterDate('2020-08-01','2021-08-01')
var result = anaysisTimes(year_list)

// Calculate time series
var chart1 = ui.Chart.image.series(result, roi,ee.Reducer.mean(),10000)
              .setChartType('LineChart').setOptions({
                interpolateNulls: true,
                title: 'ICE Area',
                hAxis: {title: 'Date'},
                vAxis: {title: 'ICE',viewWindowMode: 'explicit'},
                trendlines: { 
                  0: {title: 'polynomial',
                      type:'polynomial', 
                      degree: 2, 
                      color:'red', 
                      lineWidth: 3,
                      pointsVisible: false,
                      visibleInLegend: true,
                      showR2: true,
                  }}
                });

print('Time series of raw data',chart1);

//Generate a monthly average list of time series using functions such as FeatureCollection and ee.Reducer timeSeries
var timeSeries = ee.FeatureCollection(result.map(function(image) {
  var stats = image.reduceRegion({
    reducer: ee.Reducer.mean(), //Represents mean values taken from the study area
    geometry: roi,
    scale: 250,
    maxPixels: 1e13
  })
  
  var ratio = ee.List([stats.get('ratio'),-9999]).reduce(ee.Reducer.firstNonNull())

  var f = ee.Feature(null, {'Ratio': ratio,
    'Date': ee.Date(image.get('system:time_start')).format('YYYY-MM-dd')})
  return f
}))

//Export the above monthly average list timeSeries in csv format to drive
Export.table.toDrive({
    collection: timeSeries,
    description: 'Ratio_time_series', 
    folder: 'Pool', 
    fileFormat: 'CSV' 
})



//  1.Attempt to calculate the average of two daily data sets, calculate the time series and export the statistics

// // 1-day average
// var interval = 1;
// var increment = 'day';
// var secondDate = ee.Date('2020-08-01').advance(interval, increment).millis();
// var increase = secondDate.subtract(ee.Date('2020-08-01').millis());
// var list = ee.List.sequence(ee.Date('2020-08-01').millis(), ee.Date('2021-08-01').millis(), increase);
// var DaysMeans =  ee.ImageCollection.fromImages(list.map(function(date){
//   return result.select('ratio').filterDate(ee.Date(date), ee.Date(date).advance(interval, increment))
//           .mean().set('system:time_start',ee.Date(date).millis());
// }));
// print('DaysMeans',DaysMeans)

// // Calculation of regional time series
// var chart2 = ui.Chart.image.series(DaysMeans, roi,ee.Reducer.mean(),10000)
//               .setChartType('LineChart').setOptions({
//                 interpolateNulls: true,
//                 title: 'ICE Area',
//                 hAxis: {title: 'Date'},
//                 vAxis: {title: 'Ratio',viewWindowMode: 'explicit'}
//                 });

// print('Daily averaged calculated time series',chart2);

// //Generate a monthly average list of time series using functions such as FeatureCollection and ee.Reducer timeSeries
// var timeSeries2 = ee.FeatureCollection(DaysMeans.map(function(image) {
//   var stats = image.reduceRegion({
//     reducer: ee.Reducer.mean(), 
//     geometry: roi,
//     scale: 250,
//     maxPixels: 1e13
//   })
  
//   var ratio = ee.List([stats.get('ratio'),-9999]).reduce(ee.Reducer.firstNonNull())

//   var f = ee.Feature(null, {'Ratio': ratio,
//     'Date': ee.Date(image.get('system:time_start')).format('YYYY-MM-dd')})
//   return f
// }))

// //Export the above monthly average list timeSeries in csv format to drive
// Export.table.toDrive({
//     collection: timeSeries2, 
//     description: 'Ratio_time_series2', 
//     folder: 'Pool', 
//     fileFormat: 'CSV' 
// })


//    2.Tried smoothing the computed results using SG filtering, but there is a computation timeout

// //              SG filter smoothing function
// //##############################################################
// // Step-1: Select the time interval. One image every n days
// //##############################################################
// var n = 1;
// var totalDays = ee.Date('2021-08-01').difference(ee.Date('2020-08-01'), 'day');
// var daysToInterpolate = ee.List.sequence(1, totalDays, n)

// var initImages = daysToInterpolate.map(function(day) {
//   var image = ee.Image().rename('ratio').toFloat().set({
//     'system:index': ee.Number(day).format('%d'),
//     'system:time_start': ee.Date('2020-08-01').advance(day, 'day').millis(),
//     // Set a property so we can identify interpolated images
//     'type': 'interpolated'
//   })
//   return image
// })

// var Col = result.select('ratio')
// var initCol = ee.ImageCollection.fromImages(initImages)

// //##############################################################
// // Step-2: Finding Before and After Images Using Connections
// //##############################################################
// var mergedCol = Col.merge(initCol)

// var mergedCol = mergedCol.map(function(image) {
//   var timeImage = image.metadata('system:time_start').rename('timestamp')
//   var timeImageMasked = timeImage.updateMask(image.mask().select(0))
//   return image.addBands(timeImageMasked)
// })


// //Specify the time window
// //Set it to have at least one image in that time period
// var days = 30
// var millis = ee.Number(days).multiply(1000*60*60*24)

// var maxDiffFilter = ee.Filter.maxDifference({
//   difference: millis,
//   leftField: 'system:time_start',
//   rightField: 'system:time_start'
// })

// var lessEqFilter = ee.Filter.lessThanOrEquals({
//   leftField: 'system:time_start',
//   rightField: 'system:time_start'
// })


// var greaterEqFilter = ee.Filter.greaterThanOrEquals({
//   leftField: 'system:time_start',
//   rightField: 'system:time_start'
// })


// var filter1 = ee.Filter.and(maxDiffFilter, lessEqFilter)
// var join1 = ee.Join.saveAll({
//   matchesKey: 'after',
//   ordering: 'system:time_start',
//   ascending: false})
  
// var join1Result = join1.apply({
//   primary: mergedCol,
//   secondary: mergedCol,
//   condition: filter1
// })

// var filter2 = ee.Filter.and(maxDiffFilter, greaterEqFilter)

// var join2 = ee.Join.saveAll({
//   matchesKey: 'before',
//   ordering: 'system:time_start',
//   ascending: true})
  
// var join2Result = join2.apply({
//   primary: join1Result,
//   secondary: join1Result,
//   condition: filter2
// })

// //##############################################################
// // Step-3: Apply linear interpolation to fill each image
// //##############################################################

// //Once the connection is complete, we don't need the original image
// //We keep only the blank image that now matches the image.
// var filtered = join2Result.filter(ee.Filter.eq('type', 'interpolated'))

// var interpolatedCol = ee.ImageCollection(
//   filtered.map(interpolateImages)).select('ratio')

// //##############################################################
// // Step-4: Applying Savitzky-Golay Filters
// //##############################################################

// var oeel=require('users/OEEL/lib:loadAll');
// // Use the same maxDiffFilter we used earlier
// var maxDiffFilter = ee.Filter.maxDifference({
//   difference: millis,
//   leftField: 'system:time_start',
//   rightField: 'system:time_start'
// })

// // Use the default distanceFunction
// var distanceFunction = function(infromedImage, estimationImage) {
//   return ee.Image.constant(
//       ee.Number(infromedImage.get('system:time_start'))
//       .subtract(
//         ee.Number(estimationImage.get('system:time_start')))
//         );
//   }

// // Apply smoothing of order=1
// var order = 2;
// var smoothed = oeel.ImageCollection.SavatskyGolayFilter(
//   interpolatedCol, 
//   maxDiffFilter,
//   distanceFunction,
//   order)

// // Select the d_0_ndvi band and rename it
// var smoothed = smoothed.select(['d_0_ratio'], ['smoothed'])
// //##############################################################
// // Step-5: Visualising the results
// //##############################################################
// // Chart the time-series at a single location
// var title = 'Savitsky-Golay smoothing' +
//   '(order = '+ order + ', window_size = ' + days + ')'

// // Plot the original and fitted NDVI time-series
// var chart = ui.Chart.image.series({
//   imageCollection: Col.merge(smoothed),
//   region: roi,
//   reducer: ee.Reducer.mean(),
//   scale: 10000
// }).setOptions({
//       lineWidth: 1,
//       title: title,
//       interpolateNulls: true,
//       vAxis: {title: 'Ratio'},
//       hAxis: {title: '', format: 'YYYY-MMM'},
//       series: {
//         0: {color: 'blue', lineWidth: 1, 
//           lineDashStyle: [1, 1], pointSize: 1,
//           }, // Original
//         1: {color: 'red', lineWidth: 2 }, // Smoothed
//       },

//     })
// print('SG smoothed time series',chart)

// //Generate a monthly average list of SAVI time series using functions such as FeatureCollection and ee.Reducer timeSeries
// var timeSeries = ee.FeatureCollection(Col.merge(smoothed).map(function(image) {
//   var stats = image.reduceRegion({
//     reducer: ee.Reducer.mean(), 
//     geometry: roi,
//     scale: 250,
//     maxPixels: 1e13
//   })
  
//   // var ratio = ee.List([stats.get(['d_0_ratio'], ['smoothed']),-9999]).reduce(ee.Reducer.firstNonNull())

//   var f = ee.Feature(null, {'Ratio': stats,
//     'Date': ee.Date(image.get('system:time_start')).format('YYYY-MM-dd')})
//   return f
// }))

// //Export the above monthly average list timeSeries in csv format to drive
// Export.table.toDrive({
//     collection: timeSeries, 
//     description: 'Ratio_time_series3', 
//     folder: 'Pool', 
//     fileFormat: 'CSV' 
// })
